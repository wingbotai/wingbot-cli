{{#unless azureServerless}}
{{#if withDesigner}}
/*
 * @author wingbot.ai
 */
'use strict';
{{#if expressOrAppService}}
const express = require('express');
const createError = require('http-errors');
const botConfigStorage = require('../lib/botConfigStorage');
{{/if}}
{{#if awsServerless}}
const AWS = require('aws-sdk');
{{/if}}
const wrapRoute = require('../lib/wrapRoute');
const { botSettings } = require('../bot');
const config = require('../config');
const log = require('../lib/log');

{{#if awsServerless}}
const BOT_LAMBDA_NAME = `${config.prefix}-bot`;

const lambda = new AWS.Lambda();

function getLambda (lambdaName) {
    return new Promise((resolve, reject) => {
        lambda.getFunctionConfiguration({
            FunctionName: lambdaName
        }, (err, res) => {
            if (!err) {
                resolve(res);
            } else {
                reject(err);
            }
        });
    });
}

function updateLambda (lambdaName, env) {
    return new Promise((resolve, reject) => {
        lambda.updateFunctionConfiguration({
            FunctionName: lambdaName,
            Environment: env
        }, (err, res) => {
            if (!err) {
                resolve(res);
            } else {
                reject(err);
            }
        });
    });
}

module.exports.handler = wrapRoute(async (event) => {
    const authHeader = event.headers && event.headers.Authorization;

    if (config.wingbot.token !== authHeader) {
        log.error('Update Forbidden');
        return {
            statusCode: 403,
            headers: {
                'Content-Type': 'text/plain'
            },
            body: 'Forbidden'
        };
    }

    const fn = await getLambda(BOT_LAMBDA_NAME);

    const newEnv = Object.assign({}, fn.Environment, {
        Variables: Object.assign({}, fn.Environment.Variables, {
            WINGBOT_DEPLOYED_AT: Date.now().toString()
        })
    });

    await updateLambda(BOT_LAMBDA_NAME, newEnv);

    await botSettings();

    return {
        statusCode: 200,
        headers: {
            'Content-Type': 'text/plain'
        },
        body: 'OK'
    };
});
{{/if}}
{{#if expressOrAppService}}
module.exports = [
    express.json(),
    wrapRoute(async (req, res) => {
        const authHeader = req.get('Authorization');

        if (config.wingbot.token !== authHeader) {
            log.error('Update Forbidden');
            throw createError(403);
        }

        await botConfigStorage.invalidateConfig();

        await botSettings();

        res.send('OK');
    })
];
{{/if}}
{{/if}}
{{/unless}}
