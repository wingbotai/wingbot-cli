{{#unless azureServerless}}
{{#if withDesigner}}
/*
 * @author wingbot.ai
 */
'use strict';

{{#if expressOrAppService}}
const express = require('express');{{/if}}
const { GraphApi, validateBotApi, postBackApi } = require('wingbot');
const config = require('../config');
const wrapRoute = require('../lib/wrapRoute');
{{#if notifications}}
const notifications = require('../lib/notifications');
{{#if expressOrAppService}}
const log = require('../lib/log');
{{/if}}
{{/if}}
{{#if awsServerless}}{{#unless wingbot}}
const updateBot = require('../lib/updateBot');
{{/unless}}{{else}}
const botConfigStorage = require('../lib/botConfigStorage');
{{/if}}
const { botFactory, channel, botSettings } = require('../bot');

const DEFAULT_ACCESS_GROUPS = ['botEditor', 'botAdmin', 'appToken'];
const BOT_UPDATE_GROUPS = ['botEditor', 'botAdmin', 'botUser'];
const POSTBACK_GROUPS = ['appToken'];

const api = new GraphApi([
{{#if notifications}}
    notifications.api(),
{{/if}}
    postBackApi(channel, POSTBACK_GROUPS),
    validateBotApi(botFactory, 'start', 'foobar', BOT_UPDATE_GROUPS){{#unless webchat}},
{{#if awsServerless}}
    updateBot(() => botSettings(), BOT_UPDATE_GROUPS)
{{else}}
    botConfigStorage.api(() => botSettings(), BOT_UPDATE_GROUPS)
{{/if}}
{{/unless}}
], {
    token: config.wingbot.token,{{#unless webchat}}
    appToken: config.appToken,{{/unless}}
    groups: DEFAULT_ACCESS_GROUPS
});

{{#if awsServerless}}
module.exports.handler = wrapRoute(async (event) => {
    const body = JSON.parse(event.body);
    const response = await api.request(body, event.headers);

    return {
        statusCode: 200,
        body: JSON.stringify(response),
        headers: { 'Content-Type': 'application/json' }
    };
});
{{#if notifications}}

module.exports.worker = wrapRoute(async () => {
    await notifications.processQueue(channel, 90000);
});
{{/if}}
{{/if}}{{#if expressOrAppService}}
module.exports = [
    express.json(),
    wrapRoute(async (req, res) => {
        const { body } = req;
        const response = await api.request(body, req.headers);

        res.set({
            'Content-Type': 'application/json'
        })
            .send(response);
    })
];
{{#if notifications}}

setInterval(() => {
    notifications.processQueue(channel)
        .catch(e => log.error(e));
}, 60000);
{{/if}}
{{/if}}
{{/if}}
{{/unless}}