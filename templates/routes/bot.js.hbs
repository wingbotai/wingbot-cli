/*
 * @author wingbot.ai
 */
'use strict';

{{#if awsServerless}}
{{#unless wingbotOrchestrator}}
const AWS = require('aws-sdk');
const config = require('../config');
{{/unless}}
{{/if}}
{{#if messenger}}
{{#unless awsServerless}}
const config = require('../config');
{{/unless}}
{{/if}}
const wrapRoute = require('../lib/wrapRoute');
const { channel } = require('../bot');

{{#unless wingbotOrchestrator}}
{{#if awsServerless}}
{{#unless wingbotOrchestrator}}
const SEND_MESSAGE_LAMBDA_NAME = `${config.prefix}-send`;

const lambda = new AWS.Lambda({
    lambda: '2015-03-31'
});

{{/unless}}
{{/if}}
{{/unless}}
module.exports.handler = wrapRoute(async (event) => {

    if (event.httpMethod === 'GET') {
        const { queryStringParameters } = event;
        {{#if messenger}}
        if (queryStringParameters.ref) {
            const location = `https://m.me/${config.facebook.pageId}?ref=${encodeURIComponent(queryStringParameters.ref)}`;
            return {
                statusCode: 301,
                headers: { Location: location }
            };
        }

        const body = await channel.verifyWebhook(queryStringParameters);

        return {
            statusCode: 200,
            headers: { 'Content-Type': 'text/plain' },
            body
        };
        {{else}}
        if (queryStringParameters.ref) {
            const location = `/?ref=${encodeURIComponent(queryStringParameters.ref)}`;
            return {
                status: 301,
                headers: { Location: location }
            };
        }
        return {
            statusCode: 200,
            headers: { 'Content-Type': 'text/plain' },
            body: 'RUNNING'
        };
        {{/if}}
    }
    {{#if wingbotOrchestrator}}
    return channel.request(event.body, event.headers);
    {{else}}
    const parsedBody = JSON.parse(event.body);

    await channel.verifyRequest(event.body, event.headers);

    {{#if awsServerless}}
    await lambda.invoke({
        FunctionName: SEND_MESSAGE_LAMBDA_NAME,
        Payload: JSON.stringify({ parsedBody }),
        LogType: 'Tail',
        InvocationType: 'Event'
    }).promise();
    {{else}}
    await channel.processEvent(parsedBody);
    {{/if}}
    return {
        statusCode: 200,
        headers: {
            'Content-Type': 'text/plain'
        },
        body: 'OK'
    };
    {{/if}}
});
