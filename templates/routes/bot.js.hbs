/*
 * @author wingbot.ai
 */
'use strict';

{{#if expressOrAppService}}
const express = require('express');
{{/if}}
{{#if messenger}}
const { Facebook } = require('wingbot-facebook');
{{/if}}
{{#if botService}}
const { BotService } = require('wingbot-botservice');
{{/if}}
{{#if storeConversationHistory}}
{{#if dynamodbStorage}}
const { ChatLogStorage } = require('wingbot-dynamodb');
{{/if}}
{{#if isMongoOrCosmos}}
const { ChatLogStorage } = require('wingbot-mongodb');
{{/if}}
{{/if}}
{{#unless azureServerless}}
const wrapRoute = require('../lib/wrapRoute');
{{/unless}}
const { createProcessor } = require('../bot');
const config = require('../config');
{{#if storeConversationHistory}}
{{#if dynamodbStorage}}
const dynamodb = require('../lib/dynamodb');
{{/if}}
{{#if isMongoOrCosmos}}
const mongodb = require('../lib/mongodb');
{{/if}}
const log = require('../lib/log');

{{#if dynamodbStorage}}
const chatLogStorage = new ChatLogStorage(`${config.prefix}-chatlog`, dynamodb, log);
{{/if}}
{{#if isMongoOrCosmos}}
const chatLogStorage = new ChatLogStorage(mongodb, 'chatlogs', log);
{{/if}}
{{/if}}
{{#if messenger}}
const attachmentCache = require('../lib/attachmentCache');
{{/if}}
{{#if frontendTokenStorage}}
const botTokenStorage = require('../lib/botTokenStorage');
{{/if}}

{{#if messenger}}
const facebook = new Facebook(
    createProcessor(),
    Object.assign({ attachmentCache }, config.facebook){{#if storeConversationHistory}},
    chatLogStorage{{/if}}
);
{{/if}}
{{#if botService}}
const botService = new BotService(createProcessor(), config.botService{{#if storeConversationHistory}}, chatLogStorage{{/if}});
{{/if}}

{{#if awsServerless}}
{{#if messenger}}
module.exports.handler = wrapRoute(async (event) => {
    if (event.httpMethod === 'GET') {
        const { queryStringParameters } = event;
        const body = await facebook.verifyWebhook(queryStringParameters);

        return {
            statusCode: 200,
            headers: { 'Content-Type': 'text/plain' },
            body
        };
    }

    const parsedBody = JSON.parse(event.body);
    {{#if frontendTokenStorage}}
    const { botToken = null, senderId = null } = event.queryStringParameters || {};

    if (botToken && senderId) {
        const tokenObj = await botTokenStorage.findByToken(botToken);

        if (tokenObj.senderId !== parsedBody.sender.id) {
            return {
                statusCode: 401,
                body: 'Unauthorized'
            };
        }

        await facebook.processMessage(parsedBody, tokenObj.senderId, tokenObj.pageId);
    } else {
        facebook.verifyRequest(event.body, event.headers);
        await facebook.processEvent(parsedBody);
    }
    {{else}}
    facebook.verifyRequest(event.body, event.headers);
    await facebook.processEvent(parsedBody);
    {{/if}}

    return {
        statusCode: 200,
        headers: {
            'Content-Type': 'text/plain'
        },
        body: 'OK'
    };
});
{{/if}}
{{#if botService}}
module.exports.handler = wrapRoute(async (event) => {
    const parsedBody = JSON.parse(event.body);

    {{#if frontendTokenStorage}}
    const { botToken = null, senderId = null } = event.queryStringParameters || {};

    if (botToken && senderId) {
        const tokenObj = await botTokenStorage.findByToken(botToken);

        if (tokenObj.senderId !== parsedBody.sender.id) {
            return {
                statusCode: 401,
                body: 'Unauthorized'
            };
        }

        await botService.processMessage(parsedBody, tokenObj.senderId, tokenObj.pageId);
    } else {
        await botService.verifyRequest(parsedBody, event.headers);
        await botService.processEvent(parsedBody);
    }
    {{else}}
    await botService.verifyRequest(parsedBody, event.headers);
    await botService.processEvent(parsedBody);
    {{/if}}

    return {
        statusCode: 200,
        headers: {
            'Content-Type': 'text/plain'
        },
        body: 'OK'
    };
});
{{/if}}
{{/if}}
{{#if azureServerless}}
{{#if messenger}}
module.exports = async function (context, req) {
    if (req.method === 'GET') {
        const body = await facebook.verifyWebhook(req.query);

        return {
            status: 200,
            headers: { 'content-type': 'text/plain' },
            body
        };
    }

    {{#if frontendTokenStorage}}
    const { botToken = null, senderId = null } = req.query || {};

    if (botToken && senderId) {
        const tokenObj = await botTokenStorage.findByToken(botToken);

        if (tokenObj.senderId !== req.body.sender.id) {
            return {
                status: 401,
                headers: { 'content-type': 'text/plain' },
                body: 'Unauthorized'
            };
        }

        await facebook.processMessage(req.body, tokenObj.senderId, tokenObj.pageId);
    } else {
        facebook.verifyRequest(req.body, req.headers);
        await facebook.processEvent(req.body);
    }
    {{else}}
    facebook.verifyRequest(req.body, req.headers);
    await facebook.processEvent(req.body);
    {{/if}}

    return {
        status: 200,
        body: '{"message":"OK"}'
    };
};
{{/if}}
{{#if botService}}
module.exports = async function (context, req) {
    if (req.method === 'GET') {
        return {
            status: 200,
            body: '{"message":"RUNNING"}'
        };
    }

    {{#if frontendTokenStorage}}
    const { botToken = null, senderId = null } = req.query || {};

    if (botToken && senderId) {
        const tokenObj = await botTokenStorage.findByToken(botToken);

        if (tokenObj.senderId !== req.body.sender.id) {
            return {
                status: 401,
                headers: { 'content-type': 'text/plain' },
                body: 'Unauthorized'
            };
        }

        await botService.processMessage(req.body, tokenObj.senderId, tokenObj.pageId);
    } else {
        await botService.verifyRequest(req.body, req.headers);
        await botService.processEvent(req.body);
    }
    {{else}}
    await botService.verifyRequest(req.body, req.headers);
    await botService.processEvent(req.body);
    {{/if}}

    return {
        status: 200,
        body: '{"message":"OK"}'
    };
};
{{/if}}
{{/if}}
{{#if expressOrAppService}}
{{#if messenger}}
module.exports = [
    express.json({
        verify: (req, res, buf) => {
            {{#if frontendTokenStorage}}
            if (req.query.botToken && req.query.senderId) {
                return;
            }
            {{/if}}
            facebook.verifyRequest(buf, req.headers);
        }
    }),
    wrapRoute(async (req, res) => {
        if (req.method === 'GET') {
            const body = await facebook.verifyWebhook(req.query);
            res.send(body);
            return;
        }
        {{#if frontendTokenStorage}}
        const { botToken = null, senderId = null } = req.query;

        if (botToken && senderId) {
            const tokenObj = await botTokenStorage.findByToken(botToken);

            if (tokenObj.senderId !== req.body.sender.id) {
                res.status(401).send('Unauthorized');
                return;
            }

            await facebook.processMessage(req.body, tokenObj.senderId, tokenObj.pageId);
        } else {
            await facebook.processEvent(req.body);
        }
        {{else}}
        await facebook.processEvent(req.body);
        {{/if}}
        res.send('OK');
    })
];
{{/if}}
{{#if botService}}
module.exports = [
    express.json(),
    wrapRoute(async (req, res) => {
        if (req.method === 'GET') {
            res.send('RUNNING');
            return;
        }

        {{#if frontendTokenStorage}}
        const { botToken = null, senderId = null } = req.query;

        if (botToken && senderId) {
            const tokenObj = await botTokenStorage.findByToken(botToken);

            if (tokenObj.senderId !== req.body.sender.id) {
                res.status(401).send('Unauthorized');
                return;
            }

            await botService.processMessage(req.body, tokenObj.senderId, tokenObj.pageId);
        } else {
            await botService.verifyRequest(req.body, req.headers);
            await botService.processEvent(req.body);
        }
        {{else}}
        await botService.verifyRequest(req.body, req.headers);
        await botService.processEvent(req.body);
        {{/if}}

        res.send('OK');
    })
];
{{/if}}
{{/if}}