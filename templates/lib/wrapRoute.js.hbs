/*
 * @author wingbot.ai
 */
'use strict';

const log = require('./log');
const config = require('../config');

const SECURITY_HEADERS = {
    'X-Frame-Options': 'DENY',
    'Cache-Control': 'no-cache',
    Pragma: 'no-cache',
    ...(config.isProduction
        ? { 'Strict-Transport-Security': 'max-age=2592000' }
        : {})
};

function wrapRoute (fn) {
    return async (event, context) => {
{{#if mongodbStorage}}
        // eslint-disable-next-line no-param-reassign
        context.callbackWaitsForEmptyEventLoop = false;
{{/if}}
        const { origin, Origin } = event.headers || {};
        const allowCorsOrigin = config.allowCorsOrigin || config.appUrl;
        const useOrigin = allowCorsOrigin === '*'
            ? (origin || Origin)
            : allowCorsOrigin.replace(/\/$/, '');

        if (event.method === 'OPTIONS') {
            return {
                statusCode: 200,
                headers: {
                    ...SECURITY_HEADERS,
                    'Access-Control-Allow-Credentials': useOrigin === '*' ? 'false' : 'true',
                    'Access-Control-Allow-Origin': useOrigin,
                    'Access-Control-Allow-Headers': 'Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token, X-Amz-User-Agent, X-Wingbot-Version',
                    'Access-Control-Max-Age': '86400',
                    'Cache-Control': 'max-age=86400'
                }
            };
        }
        try {
            let res = await Promise.resolve(fn(event, context));
            if (!res) res = { statusCode: 200 };
            await log.sendAndClose();
            res.headers = {
                ...SECURITY_HEADERS,
                'Access-Control-Allow-Credentials': useOrigin === '*' ? 'false' : 'true',
                'Access-Control-Allow-Origin': useOrigin,
                ...res.headers
            };
            if (typeof res.body === 'object' && res.body !== null && !Buffer.isBuffer(res.body)) {
                res.headers['Content-type'] = 'application/json; charset=utf-8';
                res.body = JSON.stringify(res.body);
            }
            return res;
        } catch (e) {
            log.error(e, event);
            await log.sendAndClose();
            return {
                statusCode: e.status || 500,
                headers: {
                    ...SECURITY_HEADERS,
                    'Content-Type': 'text/plain'
                },
                body: config.hideVerboseErrors ? 'Internal error' : e.message
            };
        }
    };
}

module.exports = wrapRoute;
