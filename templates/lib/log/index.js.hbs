/**
 * @author wingbot.ai
 */
'use strict';
{{#if isSentryOrAppInsights}}
const Sentry = require('@sentry/node');
const { wingbotVersion } = require('wingbot');{{/if}}
const config = require('../../config');
const moduleLoggerFactory = require('./moduleLoggerFactory');

/** @typedef {import('./moduleLoggerFactory').ModuleLoggerWithClose} ModuleLoggerWithClose */

/** @type {ModuleLoggerWithClose} */
{{#if isSentryOrAppInsights}}
let logger;
{{else}}
const logger = moduleLoggerFactory(config.verboseLog);
{{/if}}
{{#if appInsights}}
if (config.isProduction) {
    const { botId, snapshot } = config.wingbot;
    Sentry.init({
        environment: config.environment,
        dsn: `https://${snapshot}@api.wingbot.ai/telemetry/${botId.replace(/\D+/g, '')}`,
        tunnel: `https://api.wingbot.ai/telemetry/${botId}?snapshot=${encodeURIComponent(snapshot)}`,
        tracesSampleRate: 1.0,
        normalizeDepth: 5
    });
    Sentry.setTag('bot', config.wingbot.bot);
    Sentry.setTag('link', `https://designer.wingbot.ai/#//editor/${config.wingbot.botId}`);
    Sentry.setTag('snapshot', config.wingbot.snapshot);
    Sentry.setTag('wingbot', wingbotVersion);
    Sentry.setTag('node', process.version);
}

if (config.appInsights) {
    // @ts-ignore
    const appInsights = module.require('applicationinsights');

    appInsights.setup(config.appInsights).start();

    logger = moduleLoggerFactory(config.verboseLog, ({
        level, message, exception, data
    }) => {
        if (exception) {
            appInsights.defaultClient.trackException({
                exception
            });
        }

        if (level === 'error') {
            Sentry.captureException(exception || new Error(message));
        }

        appInsights.defaultClient.trackEvent({
            name: `${level}: ${message}`,
            properties: {
                level,
                message,
                error: exception ? exception.message : null,
                stack: exception ? exception.stack : null,
                ...Object.keys(data)
                    .reduce((o, k) => {
                        let value = data[k];
                        const isObject = value && typeof value === 'object';
                        try {
                            if (isObject) {
                                value = JSON.stringify(data[k], null, 2);
                            }
                        } catch (e) {
                            value = `{${isObject ? Object.keys(value) : typeof value}`;
                        }
                        return Object.assign(o, {
                            [k]: value
                        });
                    }, {})
            }
        });
    });
} else {
    logger = moduleLoggerFactory(config.verboseLog);
}
{{/if}}
{{#if sentry}}

if (config.sentryDsn) {

    Sentry.init({
        dsn: config.sentryDsn,
        environment: config.environment,
        tracesSampleRate: 1.0,
        normalizeDepth: 5
    });

    Sentry.setTag('bot', config.wingbot.bot);
    Sentry.setTag('link', `https://designer.wingbot.ai/#//editor/${config.wingbot.botId}`);
    Sentry.setTag('snapshot', config.wingbot.snapshot);
    Sentry.setTag('wingbot', wingbotVersion);
    Sentry.setTag('node', process.version);

    logger = moduleLoggerFactory(config.verboseLog, ({
        level, message, exception
    }) => {
        if (level === 'error') {
            const err = exception || new Error(message);
            Sentry.captureException(err);
        }
    }, () => Sentry.flush(1000));
} else {
    logger = moduleLoggerFactory(config.verboseLog);
}
{{/if}}

module.exports = logger;
