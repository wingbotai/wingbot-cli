/**
 * @author wingbot.ai
 */
'use strict';

const tls = require('tls');
const crypto = require('crypto');
const fetch = require('node-fetch').default;
const { Certificate } = require('@fidm/x509');

function err (message, status = 403) {
    return Object.assign(new Error(`Mutual TLS: ${message}`), {
        status,
        code: status
    });
}

const LAST_ALLOWED_CHARS = [',', undefined];

function validateParam (certString, param, values) {
    if (!values) {
        return;
    }
    const valueList = Array.isArray(values) ? values : [values];
    const str = `${certString}`;
    const valid = valueList.some((value) => {
        const val = `${param}=${value}`;
        const index = str
            .indexOf(val);

        return index !== -1 && LAST_ALLOWED_CHARS.includes(str[index + val.length + 1]);
    });

    if (!valid) {
        throw err(`Invalid ${param}`);
    }
}

const CERT_START = '-----BEGIN';

/**
 *
 * @param {string|Buffer|Certificate} cert
 * @returns {Certificate}
 */
function toCertificate (cert) {
    if (typeof cert === 'object' && 'isIssuer' in cert) {
        return cert;
    }
    let c;

    if (Buffer.isBuffer(cert)) {
        c = cert.indexOf(Buffer.from(CERT_START)) === -1
            ? cert.toString('base64')
            : cert.toString('ascii');
    } else {
        c = cert;
    }

    const startIndex = c.indexOf(CERT_START);
    if (startIndex === -1) {
        c = `-----BEGIN CERTIFICATE-----\n${c}\n-----END CERTIFICATE-----`;
    } else if (startIndex > 0) {
        c = c.substring(startIndex);
    }

    return Certificate.fromPEM(Buffer.from(c));
}

/** @type {Map<string,Promise<Certificate>>} */
const certCache = new Map();

/**
 *
 * @param {string} certUrl
 * @returns {Promise<Certificate>}
 */
async function fetchCert (certUrl) {
    const res = await fetch(certUrl);
    if (res.status >= 300) {
        throw new Error(`Can't fetch issuing cert. Received ${res.status} from '${certUrl}'`);
    }
    const gotCert = await res.buffer();
    return toCertificate(gotCert);
}

/**
 *
 * @param {Date} now
 * @param {string} certUrl
 * @returns {Promise<Certificate>}
 */
async function fetchCertWithCache (now, certUrl) {
    /** @type {Certificate} */
    let crt;
    if (certCache.has(certUrl)) {
        crt = await certCache.get(certUrl)
            .catch(() => null);
        if (crt && crt.validTo <= now) {
            crt = null;
        }
        if (!crt) {
            crt = await fetchCertWithCache(now, certUrl);
        }
    } else {
        const crtPromise = fetchCert(certUrl);
        certCache.set(certUrl, crtPromise);
        try {
            crt = await crtPromise;
        } catch (e) {
            certCache.delete(certUrl);
            throw e;
        }
    }
    return crt;
}

/**
 *
 * @param {Date} now
 * @param {Certificate} cert
 * @param {Certificate} ca
 * @returns {Promise<void>}
 */
async function verifyChain (now, cert, ca) {
    if (ca && cert.isIssuer(ca)) {
        return;
    }
    if (!cert.ocspServer && !cert.issuingCertificateURL) {
        if (ca) {
            throw new Error('Client cert does not match given issuer');
        }
        const matchesRoot = tls.rootCertificates
            .some((c) => cert.isIssuer(Certificate.fromPEM(Buffer.from(c))));

        if (!matchesRoot) {
            throw new Error('Client cert does not match any ROOT certificate');
        }
        return;
    }
    let certUrl = `${cert.ocspServer}`.match(/\.crt$/) || !cert.issuingCertificateURL
        ? cert.ocspServer
        : cert.issuingCertificateURL;

    // correct protocol for malformed certificates
    certUrl = certUrl.replace(/^(https?):\/\/?/, '$1://');
    const crt = await fetchCertWithCache(now, certUrl);

    await verifyChain(now, crt, ca);
}

/**
 * @typedef {object} ClientCert
 * @prop {string} [clientCertPem] - ---BEGIN...
 * @prop {string} [issuerDN] - C=CZ,O=Company, a.s.,CN=CA Partner 2 Company
 * @prop {string} [subjectDN] - O=YourComp a.s.,CN=foo.com
 * @prop {string} [serialNumber]
 * @prop {object} [validity]
 * @prop {string} [validity.notAfter] - Thu, 11 May 2023 10:49:15 GMT
 * @prop {string} [validity.notBefore]  - Thu, 11 May 2023 10:49:15 GMT
 */

/**
 * @typedef {object} ServerlessEvent
 * @prop {object} [requestContext]
 * @prop {object} [requestContext.authentication]
 * @prop {ClientCert} [requestContext.authentication.clientCert]
 */

/**
 * @typedef {object} Verification
 * @prop {string|Promise<string>} [ca]
 * @prop {string|string[]} [fingerPrint]
 * @prop {string|string[]} [subjectCN]
 * @prop {string|string[]} [subjectO]
 * @prop {string|string[]} [issuerCN]
 * @prop {string|string[]} [issuerO]
 */

/**
 *
 * @param {ServerlessEvent} event
 * @param {Verification} clientCertVerification
 * @param {Date} [now]
 * @throws {Error}
 * @returns {Promise<void>}
 */
async function verifyClientCert (event, clientCertVerification, now = new Date()) {
    if (!clientCertVerification) {
        return;
    }

    const { requestContext = {} } = event;

    if (!requestContext
        || !requestContext.authentication
        || !requestContext.authentication.clientCert) {

        throw err('Missing Client Certificate Authentication');
    }

    const {
        issuerDN,
        subjectDN,
        validity,
        clientCertPem
    } = requestContext.authentication.clientCert;

    if (now < new Date(validity.notBefore) || now > new Date(validity.notAfter)) {
        throw err('Invalid Certificate Timestamps');
    }

    validateParam(issuerDN, 'CN', clientCertVerification.issuerCN);
    validateParam(issuerDN, 'O', clientCertVerification.issuerO);
    validateParam(subjectDN, 'CN', clientCertVerification.subjectCN);
    validateParam(subjectDN, 'O', clientCertVerification.subjectO);

    try {
        const cert = toCertificate(clientCertPem);
        let caCert = null;

        if (clientCertVerification.ca) {
            const ca = await Promise.resolve(clientCertVerification.ca);
            caCert = toCertificate(ca);
        }

        await verifyChain(now, cert, caCert);

        if (clientCertVerification.fingerPrint) {
            const fingerPrint = crypto.createHash('sha1').update(cert.raw).digest('hex');

            const fingerPrints = Array.isArray(clientCertVerification.fingerPrint)
                ? clientCertVerification.fingerPrint
                : [clientCertVerification.fingerPrint];

            const valid = fingerPrints
                .map((fp) => fp.toLowerCase().replace(/[^a-z0-9]+/g, ''))
                .some((fp) => fp === fingerPrint);

            if (!valid) {
                throw new Error('Certificate fingerprint does not match');
            }
        }
    } catch (e) {
        throw err(e.message);
    }
}

module.exports = verifyClientCert;
