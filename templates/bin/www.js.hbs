/*
 * @author wingbot.ai
 */
'use strict';

const express = require('express');
const path = require('path');
const http = require('http');
const { serverlessToExpress } = require('./lib/serverlessToExpress');
const { watchTemplates, renderTemplates } = require('./lib/renderTemplates');
const config = require('../config');

const distPath = path.join(__dirname, '..', 'dist');
const viewsPath = path.join(__dirname, '..', 'views');

const app = express();

if (!config.isProduction) {
    const webpackDevMiddleware = module.require('webpack-dev-middleware');
    const webpack = module.require('webpack');
    const webpackConfig = module.require('../webpack.config');

    // @ts-ignore
    const compiler = webpack(Object.assign(webpackConfig, {
        devtool: 'eval-cheap-module-source-map'
    }));

    app.use(webpackDevMiddleware(compiler, {
        publicPath: '/',
        stats: 'minimal'
    }));
}

const cfgFile = path.join(__dirname, '..', 'serverless.yml');
const api = serverlessToExpress(cfgFile);

app.use('/', express.static(distPath));

app.use(express.text({ type: () => true, limit: '10mb' }), api);

const port = process.env.PORT || 3000;
const server = http.createServer(app);

if (config.isProduction) {
    server.listen(port, () => {
        console.log(`App listening on port ${port}!`); // eslint-disable-line no-console
    });
} else {
    renderTemplates(config, viewsPath, distPath)
        .then(() => {
            server.listen(port, () => {
                console.log(`App listening on port ${port}!`); // eslint-disable-line no-console
                watchTemplates(config, viewsPath, distPath);
            });
        })
        .catch((e) => {
            console.error(e, e.stack); // eslint-disable-line
            process.exit(1);
        });
}
