/*
 * @author wingbot.ai
 */
'use strict';

const express = require('express');
const path = require('path');
const http = require('http');
const { serverlessToExpress } = require('./lib/serverlessToExpress');
const { watchTemplates, renderTemplates } = require('./lib/renderTemplates');
const config = require('../config');

const distPath = path.join(__dirname, '..', 'dist');
const viewsPath = path.join(__dirname, '..', 'views');

const app = express();

app.disable('x-powered-by');

if (!config.isProduction) {
    const webpackDevMiddleware = module.require('webpack-dev-middleware');
    const webpack = module.require('webpack');
    const webpackConfig = module.require('../webpack.config');

    // @ts-ignore
    const compiler = webpack(Object.assign(webpackConfig, {
        devtool: 'eval-cheap-module-source-map'
    }));

    app.use(webpackDevMiddleware(compiler, {
        publicPath: '/',
        stats: 'minimal'
    }));
}

const cfgFile = path.join(__dirname, '..', 'serverless.yml');
const api = serverlessToExpress(cfgFile);

app.use(express.text({ type: () => true, limit: '10mb' }), api);

app.use((req, res, next) => {
    const allowCorsOrigin = config.allowCorsOrigin || config.appUrl;
    const useOrigin = allowCorsOrigin === '*'
        ? req.get('Origin')
        : allowCorsOrigin.replace(/\/$/, '');

    res.header('X-Frame-Options', 'DENY');
    res.header('Access-Control-Allow-Origin', useOrigin);
    res.header('Access-Control-Allow-Credentials', useOrigin === '*' ? 'false' : 'true');
    res.header('Access-Control-Allow-Methods', 'GET,HEAD,PUT,PATCH,POST,DELETE');
    res.header('Access-Control-Expose-Headers', 'Content-Length');
    res.header('Access-Control-Allow-Headers', 'Accept, Authorization, Content-Type, X-Requested-With, Range');
    if (config.isProduction) {
        res.header('Strict-Transport-Security', 'max-age=2592000');
    }
    if (req.method === 'OPTIONS') {
        res.header('Access-Control-Max-Age', '86400');
        res.header('Cache-Control', 'max-age=86400');
        return res.send(200);
    }
    res.header('Cache-Control', 'no-cache');
    res.header('Pragma', 'no-cache');
    return next();
});

app.use('/', express.static(distPath));

const port = process.env.PORT || 3000;
const server = http.createServer(app);

renderTemplates(config, viewsPath, distPath)
    .then(() => {
        server.listen(port, () => {
            console.log(`App listening on port ${port}!`); // eslint-disable-line no-console
            if (!config.isProduction) {
                watchTemplates(config, viewsPath, distPath);
            }
        });
    })
    .catch((e) => {
        console.error(e, e.stack); // eslint-disable-line
        process.exit(1);
    });
