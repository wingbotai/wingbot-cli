{{#if testEnvironment}}
/*
 * @author wingbot.ai
 */
'use strict';

module.exports = {

    isProduction: true,

    // where the assets or html views are stored
    {{#unless testDomain}}// {{/unless}}appUrl: '{{#if testDomain}}https://{{testDomain}}{{else}}putUrlHereAfterDeploy{{/if}}',

    // where the application API lays
{{#if awsServerless}}
    {{#unless testApiDomain}}// {{/unless}}apiUrl: '{{#if testApiDomain}}https://{{testApiDomain}}{{else}}putUrlHereAfterDeploy{{/if}}',
{{else}}
    {{#unless testDomain}}// {{/unless}}apiUrl: '{{#if testDomain}}https://{{testDomain}}{{else}}putUrlHereAfterDeploy{{/if}}',
{{/if}}

{{#if withDesigner}}
    wingbot: {
        snapshot: 'test',{{#if wingbotBotNameDevTest}}
        bot: '{{wingbotBotNameDevTest}}',{{/if}}{{#if wingbotBotIdDevTest}}
        botId: '{{wingbotBotIdDevTest}}',{{/if}}
        token: '{{wingbotTestToken}}',
        ai: '{{#if wingbotBotNameDevTest}}{{wingbotBotNameDevTest}}{{else}}{{wingbotBotName}}{{/if}}-test'
    },

    // token for accessing a chatbot API
    {{#unless testApiToken}}// {{/unless}}appToken: '{{testApiToken}}',

{{/if}}
{{#if messenger}}
    facebook: {
        appId: '{{fbAppIdTest}}',
        pageId: '{{fbPageIdTest}}',
        appSecret: '{{fbAppSecretTest}}',
        pageToken: '{{fbPageTokenTest}}',
        botToken: '{{fbBotTokenTest}}'
    },

{{/if}}
{{#if webchat}}
    facebook: {
        appId: '{{fbAppIdTest}}',
        pageId: '{{fbPageIdTest}}',
        appSecret: '{{fbAppSecretTest}}',
        pageToken: '{{fbPageTokenTest}}',
        botToken: '{{fbBotTokenTest}}',
        apiUrl: '{{wchApiUrlTest}}'
    },

    webchat: {
        appId: '{{fbAppIdTest}}',
        channelId: '{{wchChannelIdTest}}'
    },

{{/if}}
{{#if wingbotOrchestrator}}
    orchestrator: {
        {{#unless orchestratorTestHostname}}// {{/unless}}apiUrl: 'https://{{orchestratorTestHostname}}/api',
        {{#unless orchestratorTestHostname}}// {{/unless}}wsUrl: 'wss://{{orchestratorTestHostname}}/ws',
        appId: '{{wingbotOrchestratorTestAppId}}',
        pageId: '{{wingbotOrchestratorTestAppId}}'{{#unless keyvault}},
        secret: '{{wingbotOrchestratorTestSecret}}'{{/unless}}
    },

{{/if}}
{{#if tableStorage}}
    tableStorage: {
        storageAccount: process.env.AZURE_STORAGE_ACCOUNT || {{#if tableStorageName}}'{{tableStorageName}}' ||{{/if}} 'donotdropusedintest',
        storageAccessKey: {{#if keyvault}}getKeyvaultSecret('storageaccesskey', process.env.AZURE_STORAGE_ACCESS_KEY){{else}}'{{tableStorageSecret}}'{{/if}}
    },

{{/if}}
{{#if botService}}
    botService: {
        appId: process.env.BOT_APP_ID || '{{bsAppIdTest}}',
        appSecret: process.env.BOT_APP_PASSWORD || '{{{bsAppPasswordTest}}}'
    },

{{/if}}
{{#if mongodbStorage}}
    db: {
        db: '{{testMongodbName}}',
        url: '{{{testMongodbConnectionString}}}'
    },

{{/if}}
{{#if mssqlStorage}}
    mssql: {
    {{#unless keyvault}}
        server: '{{testMssqlServerName}}',
        port: '{{testMssqlPort}}',
        database: '{{testMssqlName}}',
    {{/unless}}
        options: {
            encrypt: true
        }
    },

{{/if}}
{{#if cosmosdbStorage}}
    db: {
        db: '{{testCosmosdbName}}',
        url: process.env.COSMOSDB_CONNECTION_STRING || '{{{testCosmosdbConnectionString}}}'
    },

{{/if}}
{{#if sentry}}
    sentryDsn: '{{sentryDsn}}',

{{/if}}
    gaCode: '{{gaCodeTest}}'

};
{{/if}}