/*
 * @author wingbot.ai
 */
'use strict';

const config = {

    environment: process.env.NODE_ENV || 'development',

    isProduction: false,

    prefix: process.env.PREFIX || '{{projectName}}-development',

    // where the assets or html views are stored
    appUrl: 'http://localhost:3000',

    // where the application API lays
    apiUrl: 'http://localhost:3000',

{{#if messenger}}
    facebook: {
        appId: '-',
        pageId: '-',
        appSecret: '-',
        pageToken: '-',
        botToken: '-'
    },

{{/if}}
{{#if botService}}
    botService: {
        appId: process.env.BOT_APP_ID || '{{#if bsAppIdStaging}}{{bsAppIdStaging}}{{else}}{{bsAppId}}{{/if}}',
        appSecret: process.env.BOT_APP_PASSWORD || '{{#if bsAppPasswordStaging}}{{{bsAppPasswordStaging}}}{{else}}{{{bsAppPassword}}}{{/if}}'
    },

{{/if}}
{{#if withDesigner}}
    wingbot: {
        bot: '{{wingbotBotName}}',
        botId: '{{wingbotBotId}}',
        snapshot: 'development',
        token: '{{wingbotDevelopmentToken}}',
        ai: '{{wingbotBotName}}-development'
    },

{{/if}}
{{#if isMongoOrCosmos}}
    db: {
{{#if mongodbStorage}}        url: process.env.MONGODB_CONNECTION_STRING || 'mongodb://127.0.0.1:27017/{{mongodbName}}',
{{else}}{{#if cosmosdbStorage}}        url: process.env.COSMOSDB_CONNECTION_STRING || 'mongodb://localhost:C2y6yDjf5%2FR%2Bob0N8A7Cgv30VRDJIWEHLM%2B4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw%2FJw%3D%3D@localhost:10255/admin?ssl=true',{{/if}}{{/if}}
{{#if mongodbStorage}}        db: '{{#if stagingApiToken}}{{projectName}}{{else}}{{mongodbName}}{{/if}}',
{{else}}{{#if cosmosdbStorage}}        db: '{{#if stagingApiToken}}{{projectName}}{{else}}{{cosmosdbName}}{{/if}}',
        {{/if}}{{/if}}
        options: {
            poolSize: 5,
            autoReconnect: true,
            useNewUrlParser: true,
            haInterval: 5000,
{{#if mongodbStorage}}
            connectTimeoutMS: 5000,
            socketTimeoutMS: 12000,
            reconnectTries: 1200,
            reconnectInterval: 500
{{/if}}
{{#if cosmosdbStorage}}
            connectTimeoutMS: 25000,
            socketTimeoutMS: 32000,
            haInterval: 5000
{{/if}}
        }
    },

{{/if}}
{{#if jwtTokenStorage}}
    jwt: {
        secret: '{{jwtTokenSecret}}',
        options: {
            expiresIn: '30d'
        }
    },

{{/if}}
    gaCode: ''
};

/**
 * initialize config file
 *
 * @param {Object} cfg
 * @param {string} env
 */
function initialize (cfg, env = 'development') {
    try {
        const configuration = module.require(`./config.${env}`);

        // deeper object assign
        Object.keys(configuration)
            .forEach((key) => {
                if (typeof cfg[key] === 'object'
                    && typeof configuration[key] === 'object') {

                    Object.assign(cfg[key], configuration[key]);
                } else {
                    Object.assign(cfg, { [key]: configuration[key] });
                }
            });
    } catch (e) {
        console.info(`No configuration for ENV: ${env}`); // eslint-disable-line
    }

    return cfg;
}

initialize(config, process.env.NODE_ENV);

module.exports = config;
