/*
 * @author wingbot.ai
 */
'use strict';

{{#if keyvault}}
const getKeyvaultSecret = require('./getKeyvaultSecret');
{{/if}}
{{#if gSheetTestingSuit}}
let googleToken = {};
try {
    // @ts-ignore
    googleToken = module.require('../google-token.json');
} catch (e) {
    // noop
}
{{/if}}
{{#if cosmosdbStorage}}
function urlEncodeCosmoPassword (connectionString) {
    return connectionString
        .replace(/(?<=^mongodb:\/\/[^:]+:)([^@]+=)(?=@)/, (v) => encodeURIComponent(v));
}
{{/if}}
const config = {

    environment: process.env.NODE_ENV || 'development',

    isProduction: false,

    prefix: process.env.PREFIX || '{{projectName}}-development',

    // where the assets or html views are stored
    appUrl: 'http://localhost:3000',

    // where the application API lays
    apiUrl: 'http://localhost:3000',

    // enable verbose log
    verboseLog: process.env.VERBOSE_LOG_PATTERN || null,

{{#if messenger}}
    facebook: {
        appId: '-',
        pageId: '-',
        appSecret: {{#if keyvault}}getKeyvaultSecret('defaultbotsecret', '-'){{else}}'-'{{/if}},
        pageToken: '-',
        botToken: '-'
    },

{{/if}}
{{#if wingbotOrchestrator}}
    orchestrator: {
        {{#unless orchestratorDevHostname}}// {{/unless}}apiUrl: 'https://{{orchestratorDevHostname}}/api',
        {{#unless orchestratorDevHostname}}// {{/unless}}wsUrl: 'wss://{{orchestratorDevHostname}}/ws',
        appId: '{{wingbotOrchestratorDevAppId}}',
        pageId: '{{wingbotOrchestratorDevAppId}}',
        secret: {{#if keyvault}}getKeyvaultSecret('orchestratorsecret', '-'){{else}}'-'{{/if}}
    },

{{/if}}
{{#if botService}}
    botService: {
        appId: process.env.BOT_APP_ID || '{{#if bsAppIdStaging}}{{bsAppIdStaging}}{{else}}{{bsAppId}}{{/if}}',
        appSecret: process.env.BOT_APP_PASSWORD || '{{#if bsAppPasswordStaging}}{{{bsAppPasswordStaging}}}{{else}}{{{bsAppPassword}}}{{/if}}'
    },

{{/if}}
{{#if withDesigner}}
    wingbot: {
        bot: {{#if wingbotBotNameDevTest}}'{{wingbotBotNameDevTest}}'{{else}}'{{wingbotBotName}}'{{/if}},
        botId: {{#if wingbotBotIdDevTest}}'{{wingbotBotIdDevTest}}'{{else}}'{{wingbotBotId}}'{{/if}},
        snapshot: 'development',
        token: '{{wingbotDevelopmentToken}}',
        ai: '{{wingbotBotName}}-development'
    },

{{/if}}
{{#if isMongoOrCosmos}}
    db: {
{{#if mongodbStorage}}        url: {{#if keyvault}}getKeyvaultSecret('dbconnectionstring', 'mongodb://127.0.0.1:27017/{{projectName}}'){{else}}process.env.MONGODB_CONNECTION_STRING || 'mongodb://127.0.0.1:27017/{{projectName}}'{{/if}},
{{else}}{{#if cosmosdbStorage}}        url: {{#if keyvault}}getKeyvaultSecret('dbconnectionstring', 'mongodb://localhost:C2y6yDjf5%2FR%2Bob0N8A7Cgv30VRDJIWEHLM%2B4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw%2FJw%3D%3D@localhost:10255/admin?ssl=true', urlEncodeCosmoPassword){{else}}process.env.COSMOSDB_CONNECTION_STRING || 'mongodb://localhost:C2y6yDjf5%2FR%2Bob0N8A7Cgv30VRDJIWEHLM%2B4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw%2FJw%3D%3D@localhost:10255/admin?ssl=true'{{/if}},{{/if}}{{/if}}
{{#if mongodbStorage}}        db: '{{projectName}}',
{{else}}{{#if cosmosdbStorage}}        db: '{{projectName}}',
{{/if}}{{/if}}
        options: {
            poolSize: 3,
            useNewUrlParser: true,
            useUnifiedTopology: true,
            keepAlive: true,
            connectTimeoutMS: 5000,
            socketTimeoutMS: 5000,
            heartbeatFrequencyMS: 1500
        }
    },

{{/if}}
{{#if mssqlStorage}}
    mssql: {
        user: process.env.SQL_USER || 'SA',
        password: {{#if keyvault}}getKeyvaultSecret('sqlpassword', process.env.SQL_PASSWORD || 'NeotravujPotvoro1'){{else}}process.env.SQL_PASSWORD || 'NeotravujPotvoro1'{{/if}},
        server: process.env.SQL_HOST || 'localhost',
        port: parseInt(process.env.SQL_PORT || '1433', 10),
        database: process.env.SQL_DB || '{{mssqlName}}',
        options: {
            encrypt: false
        }
    },
{{/if}}
{{#if jwtTokenStorage}}
    jwt: {
        secret: '{{jwtTokenSecret}}',
        options: {
            expiresIn: '30d'
        }
    },

{{/if}}
{{#if sentry}}
    sentryDsn: '',

{{/if}}
{{#if appInsights}}
    appInsights: process.env.APPINSIGHTS_INSTRUMENTATIONKEY
        || process.env.APPSETTING_APPINSIGHTS_INSTRUMENTATIONKEY,

{{/if}}
{{#if gSheetTestingSuit}}
    gsheet: {
        // type: 'service_account',
        // project_id: '',
        // private_key_id: '',
        // private_key: '',
        // client_email: '',
        // client_id: '',
        // auth_uri: 'https://accounts.google.com/o/oauth2/auth',
        // token_uri: 'https://oauth2.googleapis.com/token',
        // auth_provider_x509_cert_url: 'https://www.googleapis.com/oauth2/v1/certs',
        // client_x509_cert_url: '',
        ...googleToken
    },

    testCasesGoogleSheetId: '{{gSheetTestingSuit}}',
{{/if}}
    gaCode: ''
};

/**
 * initialize config file
 *
 * @param {object} cfg
 * @param {string} env
 */
function initialize (cfg, env = 'development') {
    try {
        // @ts-ignore
        const configuration = module.require(`./config.${env}`);

        // deeper object assign
        Object.keys(configuration)
            .forEach((key) => {
                if (typeof cfg[key] === 'object'
                    && typeof configuration[key] === 'object') {

                    Object.assign(cfg[key], configuration[key]);
                } else {
                    Object.assign(cfg, { [key]: configuration[key] });
                }
            });
        console.info(`Loaded custom configuration for ENV: ${env}`); // eslint-disable-line no-console
    } catch (e) {
        console.info(`No custom configuration for ENV: ${env}`); // eslint-disable-line no-console
    }

    return cfg;
}

initialize(config, process.env.NODE_ENV);

module.exports = config;
