{{#if stagingEnvironment}}
/*
 * @author wingbot.ai
 */
'use strict';

module.exports = {

    isProduction: true,

    // where the assets or html views are stored
    // appUrl: 'putUrlHereAfterDeploy',

    // where the application API lays
    // apiUrl: 'putUrlHereAfterDeploy',

{{#if withDesigner}}
    wingbot: {
        snapshot: 'production',
        token: '{{wingbotStagingToken}}',
        ai: '{{wingbotBotName}}-production'
    },

    // token for accessing a chatbot API
    {{#unless stagingApiToken}}// {{/unless}}appToken: '{{stagingApiToken}}',

{{/if}}
{{#if messenger}}
    facebook: {
        appId: '{{fbAppIdStaging}}',
        pageId: '{{fbPageIdStaging}}',
        appSecret: '{{fbAppSecretStaging}}',
        pageToken: '{{fbPageTokenStaging}}',
        botToken: '{{fbBotTokenStaging}}'
    },

{{/if}}
{{#if botService}}
    botService: {
        appId: process.env.BOT_APP_ID || '{{bsAppIdStaging}}',
        appSecret: process.env.BOT_APP_PASSWORD || '{{{bsAppPasswordStaging}}}'
    },

{{/if}}
{{#if mongodbStorage}}
    db: {
        db: '{{stagingMongodbName}}',
        url: '{{{stagingMongodbConnectionString}}}',
        options: {
            poolSize: 5,
            autoReconnect: true,
            reconnectTries: 1200,
            reconnectInterval: 500
        }
    },

{{/if}}
{{#if cosmosdbStorage}}
    db: {
        db: '{{stagingCosmosdbName}}',
        url: process.env.COSMOSDB_CONNECTION_STRING || '{{{stagingCosmosdbConnectionString}}}'
    },

{{/if}}
    gaCode: '{{gaCodeStaging}}'

};
{{/if}}