{{#if stagingEnvironment}}
/*
 * @author wingbot.ai
 */
'use strict';

module.exports = {

    isProduction: true,

    // where the assets or html views are stored
    {{#unless stagingDomain}}// {{/unless}}appUrl: '{{#if stagingDomain}}https://{{stagingDomain}}{{else}}putUrlHereAfterDeploy{{/if}}',

    // where the application API lays
{{#if awsServerless}}
    {{#unless stagingApiDomain}}// {{/unless}}apiUrl: '{{#if stagingApiDomain}}https://{{stagingApiDomain}}{{else}}putUrlHereAfterDeploy{{/if}}',
{{else}}
    {{#unless stagingDomain}}// {{/unless}}apiUrl: '{{#if stagingDomain}}https://{{stagingDomain}}{{else}}putUrlHereAfterDeploy{{/if}}',
{{/if}}

{{#if withDesigner}}
    wingbot: {
        snapshot: 'staging',
        token: '{{wingbotStagingToken}}',
        ai: '{{wingbotBotName}}-staging'
    },

    // token for accessing a chatbot API
    {{#unless stagingApiToken}}// {{/unless}}appToken: '{{stagingApiToken}}',

{{/if}}
{{#if messenger}}
    facebook: {
        appId: '{{fbAppIdStaging}}',
        pageId: '{{fbPageIdStaging}}',
        appSecret: '{{fbAppSecretStaging}}',
        pageToken: '{{fbPageTokenStaging}}',
        botToken: '{{fbBotTokenStaging}}'
    },

{{/if}}
{{#if webchat}}
    facebook: {
        appId: '{{fbAppIdStaging}}',
        pageId: '{{fbPageIdStaging}}',
        appSecret: '{{fbAppSecretStaging}}',
        pageToken: '{{fbPageTokenStaging}}',
        botToken: '{{fbBotTokenStaging}}',
        apiUrl: '{{wchApiUrlStaging}}'
    },

    webchat: {
        appId: '{{wchAppIdStaging}}',
        channelId: '{{wchChannelIdStaging}}'
    },

{{/if}}
{{#if wingbotOrchestrator}}
    orchestrator: {
        {{#unless orchestratorApiUrl}}// {{/unless}}apiUrl: '{{orchestratorStagingApiUrl}}',{{#unless keyvault}}
        secret: '{{wingbotOrchestratorStagingSecret}}'{{/unless}}
    },

{{/if}}
{{#if botService}}
    botService: {
        appId: process.env.BOT_APP_ID || '{{bsAppIdStaging}}',
        appSecret: process.env.BOT_APP_PASSWORD || '{{{bsAppPasswordStaging}}}'
    },

{{/if}}
{{#if mongodbStorage}}
    db: {
        db: '{{stagingMongodbName}}',
        url: '{{{stagingMongodbConnectionString}}}'
    },

{{/if}}
{{#if mssqlStorage}}
    mssql: {
    {{#unless keyvault}}
        server: '{{stagingMssqlServerName}}',
        port: '{{stagingMssqlPort}}',
        database: '{{stagingMssqlName}}',
    {{/unless}}
        options: {
            encrypt: true
        }
    },

{{/if}}
{{#if cosmosdbStorage}}
    db: {
        db: '{{stagingCosmosdbName}}',
        url: process.env.COSMOSDB_CONNECTION_STRING || '{{{stagingCosmosdbConnectionString}}}'
    },

{{/if}}
{{#if sentry}}
    sentryDsn: '{{sentry}}',

{{/if}}
    gaCode: '{{gaCodeStaging}}'

};
{{/if}}