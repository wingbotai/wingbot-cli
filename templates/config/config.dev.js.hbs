{{#if devEnvironment}}
/*
 * @author wingbot.ai
 */
'use strict';

module.exports = {

    isProduction: true,

    // where the assets or html views are stored
    {{#unless devDomain}}// {{/unless}}appUrl: '{{#if devDomain}}https://{{devDomain}}{{else}}putUrlHereAfterDeploy{{/if}}',

    // where the application API lays
{{#if awsServerless}}
    {{#unless devApiDomain}}// {{/unless}}apiUrl: '{{#if devApiDomain}}https://{{devApiDomain}}{{else}}putUrlHereAfterDeploy{{/if}}',
{{else}}
    {{#unless devDomain}}// {{/unless}}apiUrl: '{{#if devDomain}}https://{{devDomain}}{{else}}putUrlHereAfterDeploy{{/if}}',
{{/if}}

{{#if withDesigner}}
    wingbot: {
        snapshot: 'dev',{{#if wingbotBotNameDevTest}}
        bot: '{{wingbotBotNameDevTest}}',
        botId: '{{wingbotBotIdDevTest}}',{{/if}}
        token: '{{wingbotDevToken}}',
        ai: '{{#if wingbotBotNameDevTest}}{{wingbotBotNameDevTest}}{{else}}{{wingbotBotName}}{{/if}}-dev'
    },

    // token for accessing a chatbot API
    {{#unless devApiToken}}// {{/unless}}appToken: '{{devApiToken}}',

{{/if}}
{{#if messenger}}
    facebook: {
        appId: '{{fbAppIdDev}}',
        pageId: '{{fbPageIdDev}}',
        appSecret: '{{fbAppSecretDev}}',
        pageToken: '{{fbPageTokenDev}}',
        botToken: '{{fbBotTokenDev}}'
    },

{{/if}}
{{#if webchat}}
    facebook: {
        appId: '{{fbAppIdDev}}',
        pageId: '{{fbPageIdDev}}',
        appSecret: '{{fbAppSecretDev}}',
        pageToken: '{{fbPageTokenDev}}',
        botToken: '{{fbBotTokenDev}}',
        apiUrl: '{{wchApiUrlDev}}'
    },

    webchat: {
        appId: '{{fbAppIdDev}}',
        channelId: '{{wchChannelIdDev}}'
    },

{{/if}}
{{#if wingbotOrchestrator}}
    orchestrator: {
        {{#unless orchestratorApiUrl}}// {{/unless}}apiUrl: '{{orchestratorApiUrl}}',{{#unless keyvault}}
        secret: '{{wingbotOrchestratorDevSecret}}'{{/unless}}
    },

{{/if}}
{{#if tableStorage}}
    tableStorage: {
        storageAccount: process.env.AZURE_STORAGE_ACCOUNT || {{#if tableStorageName}}'{{tableStorageName}}'{{else}}''{{/if}}{{#unless keyvault}},
        storageAccessKey: '{{tableStorageSecret}}'{{/unless}}
    },

{{/if}}
{{#if botService}}
    botService: {
        appId: process.env.BOT_APP_ID || '{{bsAppIdDev}}',
        appSecret: process.env.BOT_APP_PASSWORD || '{{{bsAppPasswordDev}}}'
    },

{{/if}}
{{#if mongodbStorage}}
    db: {
        db: '{{devMongodbName}}'{{#unless keyvault}},
        url: '{{{devMongodbConnectionString}}}'{{/unless}}
    },

{{/if}}
{{#if mssqlStorage}}
    mssql: {
    {{#unless keyvault}}
        server: '{{devMssqlServerName}}',
        port: '{{devMssqlPort}}',
        database: '{{devMssqlName}}',
    {{/unless}}
        options: {
            encrypt: true
        }
    },

{{/if}}
{{#if cosmosdbStorage}}
    db: {
        db: '{{devCosmosdbName}}'{{#unless keyvault}},
        url: process.env.COSMOSDB_CONNECTION_STRING || '{{{devCosmosdbConnectionString}}}'{{/unless}}
    },

{{/if}}
{{#if sentry}}
    sentryDsn: '{{sentryDsn}}',

{{/if}}
    gaCode: '{{gaCodeDev}}'

};
{{/if}}