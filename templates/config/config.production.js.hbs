{{#unless wingbot}}
/*
 * @author wingbot.ai
 */
'use strict';

module.exports = {

    isProduction: true,

    // where the assets or html views are stored
    {{#unless productionDomain}}// {{/unless}}appUrl: '{{#if productionDomain}}https://{{productionDomain}}{{else}}putUrlHereAfterDeploy{{/if}}',

    // where the application API lays
{{#if awsServerless}}
    {{#unless productionApiDomain}}// {{/unless}}apiUrl: '{{#if productionApiDomain}}https://{{productionApiDomain}}{{else}}putUrlHereAfterDeploy{{/if}}',
{{else}}
    {{#unless productionDomain}}// {{/unless}}apiUrl: '{{#if productionDomain}}https://{{productionDomain}}{{else}}putUrlHereAfterDeploy{{/if}}',
{{/if}}

{{#if withDesigner}}
    wingbot: {
        snapshot: 'production',{{#if wingbotBotNameDevTest}}
        bot: '{{wingbotBotName}}',{{/if}}{{#if wingbotBotIdDevTest}}
        botId: '{{wingbotBotId}}',{{/if}}
        token: '{{wingbotProductionToken}}',
        ai: '{{wingbotBotName}}-production'
    },

    // token for accessing a chatbot API
    {{#unless productionApiToken}}// {{/unless}}appToken: '{{productionApiToken}}',

{{/if}}
{{#if messenger}}
    facebook: {
        appId: '{{fbAppId}}',
        pageId: '{{fbPageId}}',
        appSecret: '{{fbAppSecret}}',
        pageToken: '{{fbPageToken}}',
        botToken: '{{fbBotToken}}'
    },

{{/if}}
{{#if webchat}}
    facebook: {
        appId: '{{fbAppId}}',
        pageId: '{{fbPageId}}',
        appSecret: '{{fbAppSecret}}',
        pageToken: '{{fbPageToken}}',
        botToken: '{{fbBotToken}}',
        apiUrl: '{{wchApiUrl}}'
    },

    webchat: {
        appId: '{{fbAppId}}',
        channelId: '{{wchChannelId}}'
    },

{{/if}}
{{#if wingbotOrchestrator}}
    orchestrator: {
        {{#unless orchestratorProductionHostname}}// {{/unless}}apiUrl: 'https://{{orchestratorProductionHostname}}/api',
        {{#unless orchestratorProductionHostname}}// {{/unless}}wsUrl: 'wss://{{orchestratorProductionHostname}}/ws',
        appId: '{{wingbotOrchestratorProductionAppId}}',
        pageId: '{{wingbotOrchestratorProductionAppId}}'{{#unless keyvault}},
        secret: '{{wingbotOrchestratorProductionSecret}}'{{/unless}}
    },

{{/if}}
{{#if tableStorage}}
    tableStorage: {
        storageAccount: process.env.AZURE_STORAGE_ACCOUNT || {{#if tableStorageName}}'{{tableStorageName}}' ||{{/if}} 'donotdropusedintest',
        storageAccessKey: {{#if keyvault}}getKeyvaultSecret('storageaccesskey', process.env.AZURE_STORAGE_ACCESS_KEY){{else}}'{{tableStorageSecret}}'{{/if}}
    },

{{/if}}
{{#if botService}}
    botService: {
        appId: process.env.BOT_APP_ID || '{{bsAppId}}',
        appSecret: process.env.BOT_APP_PASSWORD || '{{{bsAppPassword}}}'
    },

{{/if}}
{{#if mongodbStorage}}
    db: {
        db: '{{mongodbName}}',
        url: '{{{mongodbConnectionString}}}'
    },

{{/if}}
{{#if mssqlStorage}}
    mssql: {
    {{#unless keyvault}}
        server: '{{mssqlServerName}}',
        port: '{{mssqlPort}}',
        database: '{{mssqlName}}',
    {{/unless}}
        options: {
            encrypt: true
        }
    },

{{/if}}
{{#if cosmosdbStorage}}
    db: {
        db: '{{cosmosdbName}}',
        url: process.env.COSMOSDB_CONNECTION_STRING || '{{{cosmosdbConnectionString}}}'
    },

{{/if}}
{{#if logzioToken}}
    logzioToken: '{{logzioToken}}',

{{/if}}
{{#if sentry}}
    sentryDsn: '{{sentryDsn}}',

{{/if}}
    gaCode: '{{gaCode}}'

};
{{/unless}}