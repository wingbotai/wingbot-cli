/**
 * @author wingbot.ai
 */
'use strict';

const { Router{{#if withDesigner}}, BuildRouter, ai{{/if}} } = require('wingbot');
{{#if botService}}
const { botServiceQuickReplyPatch } = require('wingbot-botservice');
{{/if}}
{{#if fbLoadProfile}}
const { userLoader } = require('wingbot-facebook');
{{/if}}
{{#if webchatOrMessenger}}
const { PASS_THREAD_ACTION, TAKE_THEAD_ACTION, REQUEST_THREAD_ACTION } = require('./actions');
{{/if}}
const config = require('../config'); // eslint-disable-line no-unused-vars
{{#if withDesigner}}
const plugins = require('./plugins');
{{#unless awsServerless}}
const configStorage = require('../lib/botConfigStorage');
{{/unless}}

// set the NLP model
{{#if hasLanguageList}}
{{#each languageList}}
ai.register(`${config.wingbot.ai}-{{lang}}`{{#unless isDefault}}, '{{lang}}'{{/unless}});
{{/each}}
{{else}}
ai.register(config.wingbot.ai);
{{/if}}

// set a threshold
ai.confidence = 0.85;
{{/if}}

function botFactory (forTest = false) { // eslint-disable-line no-unused-vars
{{#if withDesigner}}
    {{#if analytics}}
    const routerOptions = {
        linksTranslator (senderId, linkText, linkUrl, isExtUrl, state = {}) {
            if (`${linkUrl}`.startsWith(config.apiUrl)
                || `${linkUrl}`.startsWith(config.appUrl)) {
                return linkUrl;
            }

            const url = encodeURIComponent(linkUrl);
            const text = encodeURIComponent(linkText);
            const sender = encodeURIComponent(state._mergedFromSenderId || senderId);
            return `${config.apiUrl}/tracker?url=${url}&text=${text}&sender=${sender}`;
        }
    };
    {{else}}
    const routerOptions = {};
    {{/if}}
    {{#unless awsServerless}}
    if (!forTest) {
        Object.assign(routerOptions, { configStorage });
    }
    {{/unless}}

    const bot = new BuildRouter(config.wingbot, plugins, routerOptions);
{{else}}
    const bot = new Router();
{{/if}}

{{#if botService}}
    bot.use(botServiceQuickReplyPatch(bot, 'start'));
{{/if}}
{{#if fbLoadProfile}}
    // load user profile from Facebook
    bot.use(userLoader(config.facebook.pageToken));

{{/if}}
{{#if webchatOrMessenger}}
    // implements primary receivers process thread action
    bot.use(REQUEST_THREAD_ACTION, (req, res) => {
        const { requested_owner_app_id: toAppId } = req.action(true);
        res.setState({ _threadPassed: true });
        res.passThread(toAppId);
    });

    // listen for threads takeover
    bot.use(TAKE_THEAD_ACTION, (req, res) => {
        res.setState({ _threadPassed: true });
    });

    // listen for pass thread action
    bot.use(PASS_THREAD_ACTION, (req, res) => {
        if (req.expected()) {
            // keep the expected action
            req.setState(req.expectedContext(false, false));
        }
        res.setState({ _threadPassed: false });
        res.takeThead(config.facebook.appId);
        return Router.END;
    });

    // action cancles the handover
    bot.use((req, res) => {
        const action = req.action();
        const isAction = action || req.isReferral();

        if (isAction
            && req.state._threadPassed
            && action !== PASS_THREAD_ACTION) {

            res.takeThead(config.facebook.appId);
        }

        if (isAction) {
            res.setState({ _threadPassed: false });
        }
        return Router.CONTINUE;
    });

    // allow only access with an action - there's a start button but we dont want to risk anything
    bot.use((req, res) => {
        const action = req.action();
        const { action: expected = null, data = null } = req.expected() || {};

        const isExternalAction = action && action !== expected;

        // IGNORE referrals without an action - probably from Ad
        if (!isExternalAction && req.isReferral()) {
            if (expected) {
                // keep the expected action
                res.expected(expected, data);
            }
            // IGNORED TOO
            return Router.END;
        }

        return Router.CONTINUE;
    });

{{/if}}
    // store previous action for analytics purposes
    bot.use((req, res) => {
        const action = req.action();
        if (action) {
            res.setState({ previousAction: action });
        }
        return Router.CONTINUE;
    });

    // attach router middlewares here
{{#unless withDesigner}}

    bot.use('start', (req, res) => {
        res.text('Hello!', {
            continue: 'What is next?'
        });
    });

    bot.use('continue', (req, res) => {
        res.text('Nothing :)');
    });

    // fallback
    bot.use((req, res) => {
        res.text('Sorry, I don\'t understand', {
            start: 'Back to start'
        });
    });
{{/unless}}

    return bot;
}

module.exports = botFactory;
