/*
 * @author wingbot.ai
 */
'use strict';

{{#if webchat}}
const request = require('request-promise-native');
const crypto = require('crypto');
const jwt = require('jsonwebtoken');
{{/if}}
{{#if webchatOrMessenger}}
const { Facebook } = require('wingbot-facebook');
const attachmentCache = require('../lib/attachmentCache');
const { PASS_THREAD_ACTION, TAKE_THEAD_ACTION, REQUEST_THREAD_ACTION } = require('./actions');
{{/if}}
{{#if wingbot}}
const { BotService } = require('wingbot-botservice');
{{/if}}
{{#if botService}}
const { BotService } = require('wingbot-botservice');
const { START_ACTION } = require('./actions');
{{/if}}
const config = require('../config');
{{#if storeConversationHistory}}
const chatLogStorage = require('../lib/chatLogStorage');
{{/if}}
{{#if anonymizeConversationLogs}}
const anonymize = require('./anonymize');
{{/if}}
const processor = require('./processor');
const botFactory = require('./bot');
const botSettings = require('./botSettings');

{{#if webchat}}
async function requestLib (input) {
    const body = JSON.stringify(input.body);

    const { secret } = config.webchat;

    const hash = crypto.createHmac('sha1', secret);

    const sha1 = hash.update(body)
        .digest('hex');

    const token = jwt.sign({
        appId: config.webchat.appId, cid: config.webchat.channelId, sha1, t: 'a'
    }, secret);

    const out = Object.assign({}, input, {
        headers: {
            'Content-type': 'application/json; charset=utf-8',
            Authorization: token
        },
        body,
        timeout: 30000,
        json: false
    });

    return request(out);
}
{{/if}}

{{#if webchatOrMessenger}}
const channel = new Facebook(
    processor,
    Object.assign({
        attachmentStorage: attachmentCache,
        passThreadAction: PASS_THREAD_ACTION,
        takeThreadAction: TAKE_THEAD_ACTION,
        requestThreadAction: REQUEST_THREAD_ACTION{{#if anonymizeConversationLogs}},
        textFilter: anonymize{{/if}}{{#if webchat}},
        requestLib,
        throwsExceptions: true
        {{/if}}
    }, config.facebook){{#if storeConversationHistory}},
    chatLogStorage{{/if}}
);
{{/if}}
{{#if botService}}
const channel = new BotService(processor, Object.assign({
    // set to null when using an initAction option in the Wingbot Browser Lib
    welcomeAction: START_ACTION{{#if anonymizeConversationLogs}},
    textFilter: anonymize{{/if}}
}, config.botService){{#if storeConversationHistory}}, chatLogStorage{{/if}});
{{/if}}
{{#if wingbot}}
const botservice = new BotService(processor, Object.assign({
    // set to null when using an initAction option in the Wingbot Browser Lib
    welcomeAction: START_ACTION{{#if anonymizeConversationLogs}},
    textFilter: anonymize{{/if}}
}, config.botService){{#if storeConversationHistory}}, chatLogStorage{{/if}});
{{/if}}

module.exports = {
    botSettings,
    botFactory,{{#if wingbot}}
    botservice,{{/if}}
    channel
};
