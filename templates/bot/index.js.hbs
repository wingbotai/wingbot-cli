/*
 * @author wingbot.ai
 */
'use strict';

{{#if messenger}}
const { Facebook } = require('wingbot-facebook');
const attachmentCache = require('../lib/attachmentCache');
const { PASS_THREAD_ACTION, TAKE_THEAD_ACTION, REQUEST_THREAD_ACTION } = require('./actions');
{{/if}}
{{#if wingbot}}
const { BotService } = require('wingbot-botservice');
{{/if}}
{{#if botService}}
const { BotService } = require('wingbot-botservice');
const { START_ACTION } = require('./actions');
{{/if}}
const config = require('../config');
{{#if storeConversationHistory}}
const chatLogStorage = require('../lib/chatLogStorage');
{{/if}}
{{#if anonymizeConversationLogs}}
const anonymize = require('./anonymize');
{{/if}}
const processor = require('./processor');
const botFactory = require('./bot');
const botSettings = require('./botSettings');

{{#if messenger}}
const channel = new Facebook(
    processor,
    Object.assign({
        attachmentStorage: attachmentCache,
        passThreadAction: PASS_THREAD_ACTION,
        takeThreadAction: TAKE_THEAD_ACTION,
        requestThreadAction: REQUEST_THREAD_ACTION{{#if anonymizeConversationLogs}},
        textFilter: anonymize{{/if}}
    }, config.facebook){{#if storeConversationHistory}},
    chatLogStorage{{/if}}
);
{{/if}}
{{#if botService}}
const channel = new BotService(processor, Object.assign({
    // set to null when using an initAction option in the Wingbot Browser Lib
    welcomeAction: START_ACTION{{#if anonymizeConversationLogs}},
    textFilter: anonymize{{/if}}
}, config.botService){{#if storeConversationHistory}}, chatLogStorage{{/if}});
{{/if}}
{{#if wingbot}}
const botservice = new BotService(processor, Object.assign({
    // set to null when using an initAction option in the Wingbot Browser Lib
    welcomeAction: START_ACTION{{#if anonymizeConversationLogs}},
    textFilter: anonymize{{/if}}
}, config.botService){{#if storeConversationHistory}}, chatLogStorage{{/if}});
{{/if}}

module.exports = {
    botSettings,
    botFactory,{{#if wingbot}}
    botservice,{{/if}}
    channel
};
