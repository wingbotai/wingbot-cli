/*
 * @author wingbot.ai
 */
'use strict';

{{#if messenger}}
const { Facebook } = require('wingbot-facebook');
const attachmentCache = require('../lib/attachmentCache');
const { PASS_THREAD_ACTION, TAKE_THEAD_ACTION, REQUEST_THREAD_ACTION } = require('./actions');
{{/if}}
{{#if wingbotOrchestrator}}
const { BotApp{{#if googleAnalytics}}, GA4{{/if}} } = require('wingbot');
const log = require('../lib/log');
{{#if tableStorage}}
const { analyticsStorage } = require('../lib/tableStorage');
{{/if}}
{{#if notifications}}
const notifications = require('../lib/notifications');
{{/if}}
const stateStorage = require('../lib/stateStorage');
{{/if}}
{{#if botService}}
const { BotService } = require('wingbot-botservice');
const { START_ACTION } = require('./actions');
{{/if}}
const config = require('../config');
{{#if storeConversationHistory}}
const chatLogStorage = require('../lib/chatLogStorage');
{{/if}}
{{#if anonymizeConversationLogs}}
const anonymize = require('./anonymize');
{{/if}}
{{#unless wingbotOrchestrator}}
const processor = require('./processor');
{{/unless}}
const botFactory = require('./bot');
const botSettings = require('./botSettings');
{{#if auditLog}}
const auditLog = require('../lib/auditLog');
{{/if}}

{{#if messenger}}
const channel = new Facebook(
    processor,
    {
        attachmentStorage: attachmentCache,
        passThreadAction: PASS_THREAD_ACTION,
        takeThreadAction: TAKE_THEAD_ACTION,
        requestThreadAction: REQUEST_THREAD_ACTION,{{#if anonymizeConversationLogs}}
        textFilter: anonymize,{{/if}}{{#if webchat}}
        requestLib,
        throwsExceptions: true,{{/if}}
        ...config.facebook
    }{{#if storeConversationHistory}},
    chatLogStorage{{/if}}
);
{{/if}}
{{#if botService}}
const channel = new BotService(processor, {
    // set to null when using an initAction option in the Wingbot Browser Lib
    welcomeAction: START_ACTION,{{#if anonymizeConversationLogs}}
    textFilter: anonymize,{{/if}}
    ...config.botService
}{{#if storeConversationHistory}}, chatLogStorage{{/if}});
{{/if}}
{{#if wingbotOrchestrator}}
const bot = botFactory();

const channel = new BotApp(bot, {
    appUrl: config.appUrl,
    stateStorage,{{#if storeConversationHistory}}
    chatLogStorage,{{/if}}{{#if auditLog}}
    // @ts-ignore
    auditLog,{{/if}}
    // @ts-ignore
    log,
    autoTyping: true,
    autoSeen: false,{{#if anonymizeConversationLogs}}
    textFilter: anonymize,{{/if}}
    ...config.orchestrator
});

{{#if tableStorage}}
channel.registerAnalyticsStorage(analyticsStorage);

{{/if}}
{{#if googleAnalytics}}
channel.registerAnalyticsStorage(new GA4({
    ...config.ga4,
    debug: true
}), {
    enabled: config.isProduction && !!config.ga4
});

{{/if}}
{{#if notifications}}
channel.processor.plugin(notifications);

const NON_INTERACTIVE_EVENTS = ['sent', 'delivery', 'notSent', 'leaved', 'failed'];
const SUBSCRIBTION_EVENTS = ['subscribed', 'unsubscribed'];

notifications.on('report', (event, campaignNameOrTag, { senderId, pageId }) => {
    const category = SUBSCRIBTION_EVENTS.includes(event)
        ? 'Event: Audience'
        : 'Event: Notification';
    const nonInteractive = NON_INTERACTIVE_EVENTS.includes(event);
    channel.trackEvent(pageId, senderId, {
        type: 'conversation',
        category,
        action: event,
        label: campaignNameOrTag,
        value: event === 'positive' ? 1 : 0
    }, event.timestamp, nonInteractive);
});

{{/if}}
{{/if}}
module.exports = {
    botSettings,
    botFactory,
    channel
};
