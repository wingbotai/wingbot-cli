/*
 * @author wingbot.ai
 */
'use strict';

{{#if webchat}}
const request = require('request-promise-native');
const crypto = require('crypto');
const jwt = require('jsonwebtoken');
{{/if}}
{{#if messenger}}
const { Facebook } = require('wingbot-facebook');
const attachmentCache = require('../lib/attachmentCache');
const { PASS_THREAD_ACTION, TAKE_THEAD_ACTION, REQUEST_THREAD_ACTION } = require('./actions');
{{/if}}
{{#if wingbotOrchestrator}}
const { BotApp } = require('wingbot');
const log = require('../lib/log');
{{#if tableStorage}}
const { onInteraction } = require('../lib/tableStorage');
{{/if}}
{{#if notifications}}
const notifications = require('../lib/notifications');
{{/if}}
const stateStorage = require('../lib/stateStorage');
const { onAction, onEvent } = require('./onAction');
{{/if}}
{{#if botService}}
const { BotService } = require('wingbot-botservice');
const { START_ACTION } = require('./actions');
{{/if}}
const config = require('../config');
{{#if storeConversationHistory}}
const chatLogStorage = require('../lib/chatLogStorage');
{{/if}}
{{#if anonymizeConversationLogs}}
const anonymize = require('./anonymize');
{{/if}}
{{#unless wingbotOrchestrator}}
const processor = require('./processor');
{{/unless}}
const botFactory = require('./bot');
const botSettings = require('./botSettings');
{{#if auditLog}}
const auditLog = require('../lib/auditLog');
{{/if}}

{{#if messenger}}
const channel = new Facebook(
    processor,
    {
        attachmentStorage: attachmentCache,
        passThreadAction: PASS_THREAD_ACTION,
        takeThreadAction: TAKE_THEAD_ACTION,
        requestThreadAction: REQUEST_THREAD_ACTION,{{#if anonymizeConversationLogs}}
        textFilter: anonymize,{{/if}}{{#if webchat}}
        requestLib,
        throwsExceptions: true,{{/if}}
        ...config.facebook
    }{{#if storeConversationHistory}},
    chatLogStorage{{/if}}
);
{{/if}}
{{#if botService}}
const channel = new BotService(processor, {
    // set to null when using an initAction option in the Wingbot Browser Lib
    welcomeAction: START_ACTION,{{#if anonymizeConversationLogs}}
    textFilter: anonymize,{{/if}}
    ...config.botService
}{{#if storeConversationHistory}}, chatLogStorage{{/if}});
{{/if}}
{{#if wingbotOrchestrator}}
const bot = botFactory();

const channel = new BotApp(bot, {
    appUrl: config.appUrl,
    stateStorage,{{#if storeConversationHistory}}
    chatLogStorage,{{/if}}{{#if auditLog}}
    // @ts-ignore
    auditLog,{{/if}}
    // @ts-ignore
    log,
    autoTyping: true,
    autoSeen: false,{{#if anonymizeConversationLogs}}
    textFilter: anonymize,{{/if}}
    ...config.orchestrator
});

bot.on('action', onAction);
channel.processor.on('event', onEvent);
{{#if tableStorage}}
channel.processor.on('interaction', onInteraction);

{{/if}}
{{#if notifications}}
channel.processor.plugin(notifications);
{{/if}}
{{/if}}

module.exports = {
    botSettings,
    botFactory,
    channel
};
