/*
 * @author wingbot.ai
 */
'use strict';

{{#if googleAnalytics}}
const analytics = require('universal-analytics');
const { replaceDiacritics } = require('webalize');
const { ai } = require('wingbot');
const config = require('../config');

const PHONE_REGEX = /((00|\+)[\s-]?[0-9]{1,4})?[\s-]?([0-9]{3,4}[\s-]?([0-9]{2,3}[\s-]?[0-9]{2}[\s-]?[0-9]{2,3}|[0-9]{3,4}[\s-]?[0-9]{3,4}))/g;
const EMAIL_REGEX = /[^@\s]+@[^.@\s]+\.[^@\s]+/g;
const NUMERIC_CODE = /^[a-z0-9]*[0-9][a-z0-9]*$/ig;

{{/if}}

/**
 * Trigged, when messaging event arrives to be able to record it
 *
 * @param {string} senderId
 * @param {string} action
 * @param {string} text
 * @param {Request} req
 * @param {string} prevAction
 */
function onEvent (senderId, action, text, req, prevAction) { // eslint-disable-line no-unused-vars
{{#if analytics}}
    if (!config.isProduction || !config.gaCode) {
        return;
    }

    const useSenderId = req.state._mergedFromSenderId || senderId;

    const tracker = analytics(config.gaCode, useSenderId, { strictCidFormat: false });

    if (req.campaign) {
        tracker.set('ni', 1);
    }
    if (action) {
        tracker.set('dp', action);
    }

    let word = text;

    if (word) {
        word = replaceDiacritics(text).replace(/\s+/g, ' ').toLowerCase().trim();

        if (word.match(PHONE_REGEX)) {
            word = word.replace(PHONE_REGEX, '@PHONE');
        }

        if (word.match(EMAIL_REGEX)) {
            word = word.replace(EMAIL_REGEX, '@EMAIL');
        }

        if (word.match(NUMERIC_CODE)) {
            word = word.replace(NUMERIC_CODE, '@CODE');
        }
    }

    const notHandled = action === '/*' || action === '*';

    if (req.isText()) {
        const { intent = '(not set)', score = 0 } = req.intent(true) || {};

        tracker.event('Intent: Detection', intent, word, score >= ai.confidence ? 0 : 1, {
            p: prevAction
        });
    }

    let actionCategory = 'User: ';
    let label = '(none)';
    let withPreviousAction = true;
    const value = notHandled ? 1 : 0;

    if (req.campaign) {
        // no user event
        return;
    }

    if (req.isSticker()) {
        actionCategory += 'Sticker';
        label = req.attachmentUrl(0);
    } else if (req.isImage()) {
        actionCategory += 'Image';
        label = req.attachmentUrl(0);
    } else if (req.hasLocation()) {
        actionCategory += 'Location';
        const { lat, long } = req.getLocation();
        label = `${lat}, ${long}`;
    } else if (req.isAttachment()) {
        actionCategory += 'Attachement';
        label = req.attachment(0).type;
    } else if (req.isText()) {
        actionCategory += 'Text';
        label = word;
    } else if (req.isQuickReply()) {
        actionCategory += 'Quick reply';
        label = word;
    } else if (req.isReferral() || req.isOptin()) {
        const { cs, cn } = req.action(true);
        actionCategory = req.isOptin()
            ? 'Entry: Optin'
            : 'Entry: Referral';
        withPreviousAction = false;
        if (cs) {
            label = cn || cs;
        }
    } else if (req.isPostBack()) {
        actionCategory += 'Button - bot';
        label = req.data.postback.title || '(unknown)';
    } else {
        actionCategory += 'Other';
    }

    if (withPreviousAction) {
        tracker.event(actionCategory, action || '(not set)', label, value, {
            p: prevAction
        });
    } else {
        tracker.event(actionCategory, action || '(not set)', label, value);
    }


    tracker.send();
{{/if}}
}


/**
 * Trigged, when action is executed to be able to record it
 *
 * @param {string} senderId
 * @param {string} action
 * @param {string} text
 * @param {Request} req
 * @param {string} prevAction

 */
function onAction (senderId, action, text, req, prevAction) { // eslint-disable-line no-unused-vars
{{#if analytics}}
    if (config.isProduction && config.gaCode) {
        // attach google analytics
        if (req.state._doNotTrack) {
            return;
        }

        const useSenderId = req.state._mergedFromSenderId || senderId;

        const tracker = analytics(config.gaCode, useSenderId, { strictCidFormat: false });

        if (req.campaign) {
            tracker.set('ni', 1);
        }

        if (action) {
            tracker.set('dp', action);
        }

        const { cn, cs, cm } = req.action(true);

        if (cs) {
            tracker.set('cs', cs);

            if (cn) tracker.set('cn', cn);
            if (cm) tracker.set('cm', cm);

            if (!req.isReferral() && !req.isOptin()) {
                tracker.event('Entry: Campaign', action, cn || cs, 0);
            }
        }

        if (action) {
            tracker.pageview(action);
        }

        tracker.send();
    }
{{/if}}
}

module.exports = { onAction, onEvent };
