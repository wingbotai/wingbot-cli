{{#if awsServerless}}
# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: {{projectName}}

plugins:
{{#if publicStorage}}
  - serverless-s3-sync
{{else}}
#  - serverless-s3-sync
{{/if}}

custom:
  accountId: {{awsAccountId}}
  company: {{projectName}}
  stage: ${opt:stage, self:provider.stage}{{#if dynamodbStorage}}
  botDbReservations:
    staging: 1
    production: 10
  botDbReservation: ${self:custom.botDbReservations.${self:custom.stage}}{{/if}}
  prefix: ${self:service}-${self:custom.stage}
{{#if publicStorage}}
  bucket:
{{#if stagingEnvironment}}
    staging: {{stagingDomain}}
{{/if}}
    production: {{productionDomain}}
  certificate:
{{#if stagingEnvironment}}
    staging: {{certificateArnStaging}}
{{/if}}
    production: {{certificateArnProduction}}
  cors: https://${self:custom.bucket.${self:custom.stage}}
  certArn: ${self:custom.certificate.${self:custom.stage}}
  s3Sync:
    - bucketName: ${self:custom.bucket.${self:custom.stage}}
      localDir: dist
      acl: public-read
      params:
        - "*.plist":
            ContentType: text/xml
        - "*.png":
            ContentType: image/png
        - "*.jpg":
            ContentType: image/jpeg
        - "*.gif":
            ContentType: image/gif
        - "*.html":
            ContentType: text/html
        - "*.css":
            ContentType: text/css
        - "*.js":
            ContentType: text/javascript
        - "*.mp4":
            ContentType: video/mp4
{{/if}}
provider:
  name: aws
  runtime: nodejs8.10
  region: {{awsRegion}}
  stage: production
  memorySize: 256

  stackTags: # Optional CF stack tags
    Company: ${self:custom.company}

  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action:
        - "lambda:InvokeFunction"
      Resource:
        - "arn:aws:lambda:${self:provider.region}:${self:custom.accountId}:function:${self:custom.prefix}-send"
{{#if dynamodbStorage}}
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
      Resource: arn:aws:dynamodb:${self:provider.region}:*:*
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.prefix}*
{{/if}}

  environment:
    PREFIX: ${self:custom.prefix}
    NODE_ENV: ${self:custom.stage}
    {{#if publicStorage}}
    CORS: ${self:custom.cors}
    {{/if}}

package:
  exclude:
    - .vscode/**
    - bin/**
    - dist/**
    - public/**
    - test/**
    - coverage/**
    - .eslintrc
    - mocha.opts
    - circle.ymp
    - jsconfig.json
    - webpack.config.js
    - .npmignore
    - node_modules/aws-sdk/dist/aws-sdk-react-native.js
    - node_modules/.cache/**

functions:
  bot:
    handler: routes/bot.handler
    memorySize: 128
    events:
      - http: GET /bot
      - http: POST /bot

  wingbotApi:
    handler: routes/api.handler
    memorySize: 192
    timeout: 30
    role: DeployRole
    events:
      - http: POST /api

  send:
    handler: routes/send.handler
    memorySize: 192
    timeout: 90

{{#if analytics}}

  tracker:
    handler: routes/tracker.handler
    memorySize: 128
    timeout: 15
    events:
      - http: GET /tracker
{{/if}}
{{#if notifications}}

  worker:
    handler: routes/api.worker
    memorySize: 128
    timeout: 130
    events:
      - schedule: rate(2 minutes)
{{/if}}

resources:
  Conditions:
    ProductionResources:
      Fn::Equals:
        - ${opt:stage}
        - production

  Resources:

    DeployRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action:
                - sts:AssumeRole

        Path: '/'
        RoleName: ${self:custom.prefix}-${self:provider.region}-deployBotRole
        Policies:
          - PolicyName: ${self:custom.prefix}-deployBotPolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource:
                    - "arn:aws:lambda:${self:provider.region}:${self:custom.accountId}:function:${self:custom.prefix}-send"
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                  Resource:
                    - 'arn:aws:logs:${self:provider.region}:${self:custom.accountId}:log-group:/aws/lambda/${self:custom.prefix}-wingbotApi:*'
                - Effect: Allow
                  Action:
                    - "logs:PutLogEvents"
                  Resource:
                    - 'arn:aws:logs:${self:provider.region}:${self:custom.accountId}:log-group:/aws/lambda/${self:custom.prefix}-wingbotApi:*:*'
                - Effect: Allow
                  Action:
                    - "lambda:GetFunctionConfiguration"
                    - "lambda:UpdateFunctionConfiguration"
                  Resource:
                    - "arn:aws:lambda:${self:provider.region}:${self:custom.accountId}:function:${self:custom.prefix}-send"
                    {{#if notifications}}
                    - "arn:aws:lambda:${self:provider.region}:${self:custom.accountId}:function:${self:custom.prefix}-worker"
                    {{/if}}
{{#if dynamodbStorage}}

    StatesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}-states
        Tags:
          - Key: Company
            Value: ${self:custom.company}
        AttributeDefinitions:
          - AttributeName: senderId
            AttributeType: S
          - AttributeName: pageId
            AttributeType: S
        KeySchema:
          - AttributeName: senderId
            KeyType: HASH
          - AttributeName: pageId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: ${self:custom.botDbReservation}
{{#unless awsServerless}}

    BotConfigTable:
      Type: AWS::DynamoDB::Table
      Properties:
      TableName: ${self:custom.prefix}-botconfig
      AttributeDefinitions:
          - AttributeName: k
          AttributeType: S
      KeySchema:
          - AttributeName: k
          KeyType: HASH
      ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
{{/unless}}
{{#if storeConversationHistory}}

    ChatlogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}-chatlog
        Tags:
          - Key: Company
            Value: ${self:custom.company}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: time
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: time
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: ${self:custom.botDbReservation}
{{/if}}
{{#if dbTokenStorage}}

    BottokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}-tokens
        Tags:
          - Key: Company
            Value: ${self:custom.company}
        AttributeDefinitions:
          - AttributeName: senderId
            AttributeType: S
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: senderId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: token
            KeySchema:
              - AttributeName: token
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.botDbReservation}
          WriteCapacityUnits: 1
{{/if}}
{{#if messenger}}

    AttachmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}-attachments
        AttributeDefinitions:
          - AttributeName: url
            AttributeType: S
        KeySchema:
          - AttributeName: url
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
{{/if}}
{{/if}}
{{#if publicStorage}}

    ContentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket.${self:custom.stage}}
        Tags:
          - Key: Company
            Value: ${self:custom.company}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
              AllowedOrigins:
                - '*'
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html

    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        Tags:
          - Key: Company
            Value: ${self:custom.company}
        DistributionConfig:
          PriceClass: PriceClass_100
          Origins:
            - DomainName: ${self:custom.bucket.${self:custom.stage}}.s3-website.${self:provider.region}.amazonaws.com
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
          Enabled: 'true'
          Aliases:
            - ${self:custom.bucket.${self:custom.stage}}
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 404
              ResponsePagePath: /error.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            MinTTL: 60
            TargetOriginId: WebApp
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
              Headers:
                - Origin
                - Access-Control-Request-Method
                - Access-Control-Request-Headers
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.certArn}
            SslSupportMethod: sni-only
{{/if}}
{{/if}}