{
    "Use wingbot plugin": {
        "prefix": "wbplugin",
        "scope": "javascript",
        "body": [
            "/**",
            " * @author {username}",
            " */",
            "'use strict';",
            "",
            "const { Router } = require('wingbot');",
            "",
            "/** @typedef {import('wingbot/src/Request')} Request */",
            "/** @typedef {import('wingbot/src/Responder')} Responder */",
            "",
            "/**",
            " *",
            " * @param {object} params",
            " * @returns {Function}",
            " */",
            "function $1 (params) {",
            "",
            "    /**",
            "     *",
            "     * @param {Request} req",
            "     * @param {Responder} res",
            "     */",
            "    async function $1Plugin (req, res) {",
            "",
            "        return Router.NEXT;",
            "    }",
            "",
            "    return $1Plugin;",
            "}",
            "",
            "module.exports = $1;",
            ""
        ]
    },
    "Wingbot plugin test": {
        "prefix": "wbtestplugin",
        "scope": "javascript",
        "description": "wingbot test plugin",
        "body": [
            "/**",
            " * @author {username}",
            " */",
            "'use strict';",
            "",
            "const { Tester, Router } = require('wingbot');",
            "// const assert = require('assert');",
            "const plugins = require('../../../bot/plugins');",
            "",
            "/** @typedef {import('wingbot/src/Tester')} TesterType */",
            "",
            "describe('Plugin: $1', () => {",
            "",
            "    /** @type {TesterType} */",
            "    let t;",
            "",
            "    beforeEach(() => {",
            "        const bot = new Router();",
            "",
            "        bot.use('plugin', plugins.getWrappedPlugin('$1', {}, {}, { isLastIndex: true }));",
            "",
            "        t = new Tester(bot);",
            "    });",
            "",
            "    it('should', async () => {",
            "        await t.postBack('plugin');",
            "",
            "    });",
            "",
            "});",
            ""
        ]
    },
    "Wingbot api service": {
        "prefix": "wbapiservice",
        "scope": "javascript",
        "description": "wingbot api service with axios",
        "body": [
            "/**",
            " * @author {username}",
            " */",
            "'use strict';",
            "",
            "const axios = require('axios').default;",
            "const MockAdapter = require('axios-mock-adapter').default;",
            "const $2ApiMocks = require('./$2ApiMocks');",
            "",
            "/** @typedef {import('axios').AxiosPromise} AxiosPromise */",
            "/** @typedef {import('axios').AxiosRequestConfig} AxiosRequestConfig */",
            "/** @typedef {import('axios').AxiosResponse} AxiosResponse */",
            "",
            "/**",
            " * @typedef {object} $1ApiOptions",
            " * @prop {string} hostname",
            " * @prop {Promise<string>|string} secret",
            " */",
            "",
            "class $1Api {",
            "",
            "    /**",
            "     *",
            "     * @param {$1ApiOptions} options",
            "     * @param { {log:Function,error:Function} } log",
            "     */",
            "    constructor (options, log = console) {",
            "        this._options = options;",
            "",
            "        this._log = log;",
            "",
            "        this._axiosInstance = null;",
            "    }",
            "",
            "    /**",
            "     *",
            "     * @param {AxiosRequestConfig} params",
            "     * @returns {Promise<AxiosResponse>}",
            "     */",
            "    async _axios (params) {",
            "        if (this._axiosInstance === null) {",
            "            // const secret = await Promise.resolve(this._options.secret);",
            "",
            "            /** @type {AxiosRequestConfig} */",
            "            const axiosOptions = {",
            "                // validateStatus: (status) => status < 500,",
            "                // headers: {",
            "                //     Authorization: secret",
            "                // },",
            "                baseURL: this._options.hostname,",
            "                timeout: 10000",
            "            };",
            "",
            "            this._axiosInstance = axios.create(axiosOptions);",
            "",
            "            const mocks = new MockAdapter(this._axiosInstance, { onNoMatch: 'passthrough' });",
            "",
            "            $2ApiMocks(mocks);",
            "        }",
            "",
            "        return this._axiosInstance(params);",
            "    }",
            "",
            "    /**",
            "     * @typedef {object} ApiResponse",
            "     * @prop {string} id",
            "     */",
            "",
            "    /**",
            "     *",
            "     * @param {string} id",
            "     * @returns {Promise<ApiResponse>}",
            "     */",
            "    async fetchSomething (id) {",
            "        /** @type {AxiosRequestConfig} */",
            "        const request = {",
            "            // method: 'POST',",
            "            url: `/something/\\${id\\}`",
            "        };",
            "",
            "        try {",
            "            const res = await this._axios(request);",
            "",
            "            // this._log.log('$1 request', request, res.data);",
            "            return res.data;",
            "        } catch (e) {",
            "            if (e.isAxiosError) {",
            "                const { status, headers, data } = e.response;",
            "                this._log.error(`$1 error: ${e.message}`, { status, headers, data }, request);",
            "            } else {",
            "                this._log.error('$1 error', e, request);",
            "            }",
            "            throw e;",
            "        }",
            "    }",
            "",
            "}",
            "",
            "module.exports = $1Api;",
            ""
        ]
    },
    "Wingbot api mocks": {
        "prefix": "wbapimocks",
        "scope": "javascript",
        "description": "wingbot mocks for API service",
        "body": [
            "/**",
            " * @author {username}",
            " */",
            "'use strict';",
            "",
            "/** @typedef {import('axios-mock-adapter').default} RequestHandler */",
            "",
            "/**",
            " *",
            " * @param {RequestHandler} mockAdapter",
            " */",
            "function $1ApiMocks (mockAdapter) {",
            "",
            "    mockAdapter.onGet(/\\/something\\/1$/)",
            "        .reply(200, {",
            "            id: '1'",
            "        });",
            "",
            "    mockAdapter.onPost(/\\/something$/, {",
            "        // asymmetricMatch: (body) => body.propInPost === 'test'",
            "    }).reply(200, {",
            "        ok: 1",
            "    });",
            "}",
            "",
            "module.exports = $1ApiMocks;",
            ""
        ]
    },
    "Wingbot full plugin": {
        "scope": "json",
        "prefix": "wbfullplugin",
        "body": [
            "{",
            "  \"id\": \"$1\",",
            "  \"name\": \"$2\",",
            "  \"description\": \"\",",
            "  \"inputs\": [",
            "    {",
            "      \"name\": \"\",",
            "      \"label\": \"\",",
            "      \"type\": \"select\",",
            "      \"options\": [",
            "        {",
            "          \"value\": \"companyId\",",
            "          \"label\": \"podle IÄŒO\"",
            "        }",
            "      ]",
            "    },",
            "    {",
            "      \"name\": \"\",",
            "      \"label\": \"\",",
            "      \"type\": \"text\",",
            "      \"validations\": [",
            "        {",
            "          \"type\": \"regexp\",",
            "          \"value\": \"^.+$\",",
            "          \"message\": \"Value should not be empty\"",
            "        }",
            "      ]",
            "    }",
            "  ],",
            "  \"items\": [",
            "    {",
            "      \"id\": \"success\",",
            "      \"description\": \"\"",
            "    },",
            "    {",
            "      \"id\": \"error\",",
            "      \"description\": \"\"",
            "    }",
            "  ]",
            "}",
            ""
        ]
    },
    "Wingbot simple plugin": {
        "scope": "json",
        "prefix": "wbplugin",
        "body": [
            "{",
            "  \"id\": \"$1\",",
            "  \"name\": \"$2\",",
            "  \"description\": \"\",",
            "  \"inputs\": [",
            "    {",
            "      \"type\": \"text\",",
            "      \"name\": \"\",",
            "      \"label\": \"\"",
            "    },",
            "  ],",
            "  \"items\": [",
            "    {",
            "      \"id\": \"success\",",
            "      \"description\": \"\"",
            "    },",
            "    {",
            "      \"id\": \"error\",",
            "      \"description\": \"\"",
            "    }",
            "  ]",
            "}",
            ""
        ],
    },
    "Wingbot array plugin": {
        "scope": "json",
        "prefix": "wbarrayplugin",
        "body": [
            "{",
            "  \"id\": \"$1\",",
            "  \"name\": \"$2\",",
            "  \"description\": \"\",",
            "  \"inputs\": [",
            "    {",
            "      \"name\": \"\",",
            "      \"label\": \"\",",
            "      \"type\": \"array\",",
            "      \"keyPropertyName\": \"name\",",
            "      \"columns\": [",
            "        {",
            "          \"name\": \"value\",",
            "          \"label\": \"\"",
            "        }",
            "      ],",
            "      \"inputs\": [",
            "        {",
            "          \"type\": \"text\",",
            "          \"name\": \"name\",",
            "          \"label\": \"\"",
            "        },",
            "        {",
            "          \"type\": \"text\",",
            "          \"name\": \"value\",",
            "          \"label\": \"\"",
            "        }",
            "      ]",
            "    }",
            "  ],",
            "  \"items\": [",
            "    {",
            "      \"id\": \"success\",",
            "      \"description\": \"\"",
            "    },",
            "    {",
            "      \"id\": \"error\",",
            "      \"description\": \"\"",
            "    }",
            "  ]",
            "}",
            ""
        ]
    }
}